{"version":3,"sources":["view.js","App.js","serviceWorker.js","index.js"],"names":["View","country","parameter","Object","keys","search","console","log","value","values","countries","className","map","data","style","src","flag","alt","name","reducer","searchParams","action","type","ACTIONS","ADD_REGION","ADD_CAPITAL","ADD_LANGUAGE","ADD_ALPHA2","ADD_POPULATION","payload","App","useReducer","dispatch","React","useState","count","setCount","useEffect","fetch","then","res","json","class","id","placeholder","onClick","val","document","getElementById","region","capital","languages","alpha2Code","population","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba933c16.chunk.js","sourcesContent":["import React from 'react';\r\nimport './View.css';\r\nfunction View(country)\r\n{\r\n    const parameter=Object.keys(country.search);\r\n    console.log(\"para\",parameter)\r\n    const value=Object.values(country.search)\r\n    console.log(\"value\",value);\r\n    const countries=country.country;\r\n    return(<div className=\"container\">\r\n    {countries.map((data)=>{\r\n        if(data[parameter]==value)\r\n        {\r\n            \r\n                return(\r\n                         \r\n                     <div className=\"card\" style={{\"width\":\"18rem\",\"border\":\"2px solid black\"}}>\r\n                     <img src={data.flag} className=\"card-img-top\" alt=\"...\"/>\r\n                     <div className=\"card-body\">\r\n                       <h5 className=\"card-title\">{data.name}</h5>\r\n                       \r\n                       \r\n                     </div>\r\n                   </div>\r\n                   )}})\r\n    }\r\n    </div>)\r\n    \r\n}\r\n\r\n   \r\n\r\nexport default View;","import React,{useEffect,useReducer} from 'react';\nimport View from './view'\nfunction reducer(searchParams,action){\n  switch(action.type){\n    case ACTIONS.ADD_REGION:\n      return action.payload;break;\n    case ACTIONS.ADD_CAPITAL:\n      return action.payload;break;\n    case ACTIONS.ADD_LANGUAGE:\n      return action.payload;break;\n    case ACTIONS.ADD_ALPHA2:\n      return action.payload;break;\n    case ACTIONS.ADD_POPULATION:\n      return action.payload;break;\n  }\n\n}\nconst ACTIONS={\n  ADD_REGION:\"addregion\",\n  ADD_CAPITAL:\"addcapital\",\n  ADD_LANGUAGE:\"addlanguage\",\n  ADD_ALPHA2:\"addalpha\",\n  ADD_POPULATION:\"addpop\"\n\n}\n\nfunction App() {\n  const [searchParams,dispatch]=useReducer(reducer,{});\n  const [count,setCount]=React.useState([])\n  var countries_data={};\n  useEffect(()=>{\n   fetch('https://restcountries.eu/rest/v2/all')\n    .then(res=>res.json())\n    .then(data=>setCount(data))\n    \n  },[])\n  \n  \n  //For Region\n  const reg=(val)=>{\n    dispatch({type:ACTIONS.ADD_REGION,payload:{region:val}})\n  }\n  //For Capital\n  const cap=(val)=>{\n    dispatch({type:ACTIONS.ADD_CAPITAL,payload:{capital:val}})\n  }\n\n  //For Language\n  const lang=(val)=>{\n    dispatch({type:ACTIONS.ADD_LANGUAGE,payload:{languages:val}})\n  }\n\n  //For Alpha 2\n  const alpha=(val)=>{\n    dispatch({type:ACTIONS.ADD_ALPHA2,payload:{alpha2Code:val}})\n\n  }\n\n  //For Population\n  const populn=(val)=>{\n    dispatch({type:ACTIONS.ADD_POPULATION,payload:{population:val}})\n  }\n  \n  \n  console.log(\"in app\",searchParams)\n  return(\n    <>\n    <div className=\"jumbotron\"> \n        <h1 className=\"text-primary\">Display Countries</h1>\n    </div>\n      <h5 className=\"text-primary\">Search By:</h5>\n      \n        <div class=\"row\">\n            <div className=\"col-sm-2\">\n             <input type=\"text\" class=\"form-control\" id=\"region\"  placeholder=\"Region\"/>\n             <button type=\"submit\" className=\"btn btn-primary\"onClick={()=>reg(document.getElementById(\"region\").value)}>Search</button>\n       </div>\n        <div className=\"col-sm-2\">\n            <input type=\"text\" class=\"form-control\" id=\"capital\"placeholder=\"Capital\"/>\n            <button type=\"submit\" className=\"btn btn-primary\"onClick={()=>cap(document.getElementById(\"capital\").value)}>Search</button>\n            </div>\n        <div className=\"col-sm-2\">\n            <input type=\"text\" class=\"form-control\" id=\"language\"placeholder=\"Language\"/>\n            <button type=\"submit\" className=\"btn btn-primary\"onClick={()=>lang(document.getElementById(\"language\").value)}>Search</button>\n       </div> \n       <div className=\"col-sm-2\">\n            <input type=\"text\" class=\"form-control\" id=\"alpha2\"placeholder=\"Alpha 2 Code\"/>\n            <button type=\"submit\" className=\"btn btn-primary\"onClick={()=>alpha(document.getElementById(\"alpha2\").value)}>Search</button>\n       </div>\n       <div className=\"col-sm-2\">\n            <input type=\"text\" class=\"form-control\" id=\"pop\"placeholder=\"Population\"/>\n            <button type=\"submit\" className=\"btn btn-primary\"onClick={()=>populn(document.getElementById(\"pop\").value)}>Search</button>\n       </div>\n       \n        <View country={count} search={searchParams}/>\n       \n         \n       </div>\n       <div>\n         \n       </div>\n      \n       \n       \n      \n    \n    </>\n  )\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}